plugins {
    id 'java'
//    id 'org.springframework.boot' version '3.3.1'
//    id 'org.spring.dependency-management' version '1.1.5'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
}

jar.enabled = true
tasks.named('bootJar') { enabled = true }
tasks.named('jar')     { enabled = false }

group = 'com.chat'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    // Spring Boot 3.5.x에는 SpringDoc OpenAPI가 내장되어 있음
     implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.modelmapper:modelmapper:3.1.1'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // jackson 처리용

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // JSON 직렬화/역직렬화
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


def bootJarTask = tasks.named('bootJar')
def jarNameProvider = bootJarTask.flatMap { it.archiveFileName }

// 컨텍스트 디렉터리를 Provider로 정의
def ctxDir = layout.buildDirectory.dir('docker')

tasks.register('prepareDockerContext', Sync) {
    dependsOn bootJarTask
    into ctxDir

    // 루트의 Dockerfile만 복사 (정확한 파일명: Dockerfile)
    from(rootProject.layout.projectDirectory) {
        include 'Dockerfile'
    }

    // 이미지에 필요한 산출물만 복사
    from(project.layout.buildDirectory) {
        include 'libs/**'
    }
}

tasks.register('buildDockerImageCustoms', com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    group = 'docker'
    description = 'Build image with root Dockerfile and clean context'

    // 반드시 컨텍스트 준비 이후 실행
    dependsOn 'prepareDockerContext'

    // 입력을 "Provider"로 연결 (존재 여부를 실행시에 평가)
    inputDir.set(ctxDir)
    dockerFile.set(ctxDir.map { it.file('Dockerfile') })  // ← 핵심 수정

    images.add("${project.name}:${project.version}")
    buildArgs.put("JAR_FILE", jarNameProvider.map { "libs/${it}" })

    doFirst {
        println "Using Dockerfile=" + dockerFile.get().asFile.absolutePath
        println "Using Context   =" + inputDir.get().asFile.absolutePath
        println "Using JAR_FILE=build/libs/${jarNameProvider.get()}"
    }
}